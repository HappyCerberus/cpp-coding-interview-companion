#include "catch2/catch_test_macros.hpp"
#include "paren.h"
#include <algorithm>

TEST_CASE("Validate Solutions") {
  std::vector<std::vector<std::string>> parentheses = {
      {"()"},
      {"()()", "(())"},
      {"((()))", "(()())", "(())()", "()(())", "()()()"},
      {"(((())))", "((()()))", "((())())", "((()))()", "(()(()))", "(()()())",
       "(()())()", "(())(())", "(())()()", "()((()))", "()(()())", "()(())()",
       "()()(())", "()()()()"},
      {"((((()))))", "(((()())))", "(((())()))", "(((()))())", "(((())))()",
       "((()(())))", "((()()()))", "((()())())", "((()()))()", "((())(()))",
       "((())()())", "((())())()", "((()))(())", "((()))()()", "(()((())))",
       "(()(()()))", "(()(())())", "(()(()))()", "(()()(()))", "(()()()())",
       "(()()())()", "(()())(())", "(()())()()", "(())((()))", "(())(()())",
       "(())(())()", "(())()(())", "(())()()()", "()(((())))", "()((()()))",
       "()((())())", "()((()))()", "()(()(()))", "()(()()())", "()(()())()",
       "()(())(())", "()(())()()", "()()((()))", "()()(()())", "()()(())()",
       "()()()(())", "()()()()()"},
  };
  for (size_t i = 0; i < std::size(parentheses); ++i) {
    auto solutions = valid_parentheses(i + 1);
    REQUIRE(std::ranges::is_permutation(parentheses[i], solutions));
  }
}